/**
 * File generated by the ThingML IDE
 * /!\Do not edit this file/!\
 * In case of a bug in the generated code,
 * please submit an issue on our GitHub
 **/

package org.thingml.generated;

import no.sintef.jasm.*;
import no.sintef.jasm.ext.*;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.io.File;
import java.io.FileWriter;
import java.io.BufferedWriter;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.List;
import java.util.ArrayList;
import java.io.IOException;

import org.thingml.generated.api.*;
import org.thingml.generated.messages.*;

import java.util.*;

/**
 * Definition for type : OutagePredictor
 **/
public class OutagePredictor extends Component implements IOutagePredictor_outage_service {

private boolean debug = false;
public boolean isDebug() {return debug;}
public void setDebug(boolean debug) {this.debug = debug;}
public String toString() {
String result = "instance " + getName() + "\n";
result += "\tcpu_user = " + OutagePredictor_cpu_user_var;
result += "\tcpu_system = " + OutagePredictor_cpu_system_var;
result += "\tcpu_wait = " + OutagePredictor_cpu_wait_var;
result += "\tprediction = " + OutagePredictor_prediction_var;
result += "\tdisk_read = " + OutagePredictor_disk_read_var;
result += "\tdisk_write = " + OutagePredictor_disk_write_var;
result += "\tmem_used = " + OutagePredictor_mem_used_var;
result += "\tswap_used = " + OutagePredictor_swap_used_var;
result += "\tnet_eth0_rx = " + OutagePredictor_net_eth0_rx_var;
result += "\tnet_eth0_tx = " + OutagePredictor_net_eth0_tx_var;
result += "\tnet_eth1_rx = " + OutagePredictor_net_eth1_rx_var;
result += "\tnet_eth1_tx = " + OutagePredictor_net_eth1_tx_var;
result += "\tsch_threads = " + OutagePredictor_sch_threads_var;
result += "";
return result;
}

public synchronized void request_outage_prediction_via_outage_service(double OutageMessages_request_outage_prediction_cpu_user_var, double OutageMessages_request_outage_prediction_cpu_system_var, double OutageMessages_request_outage_prediction_cpu_wait_var, double OutageMessages_request_outage_prediction_disk_read_var, double OutageMessages_request_outage_prediction_disk_write_var, double OutageMessages_request_outage_prediction_mem_used_var, double OutageMessages_request_outage_prediction_swap_used_var, double OutageMessages_request_outage_prediction_net_eth0_rx_var, double OutageMessages_request_outage_prediction_net_eth0_tx_var, double OutageMessages_request_outage_prediction_net_eth1_rx_var, double OutageMessages_request_outage_prediction_net_eth1_tx_var, double OutageMessages_request_outage_prediction_sch_threads_var){
final Event _msg = request_outage_predictionType.instantiate(OutageMessages_request_outage_prediction_cpu_user_var, OutageMessages_request_outage_prediction_cpu_system_var, OutageMessages_request_outage_prediction_cpu_wait_var, OutageMessages_request_outage_prediction_disk_read_var, OutageMessages_request_outage_prediction_disk_write_var, OutageMessages_request_outage_prediction_mem_used_var, OutageMessages_request_outage_prediction_swap_used_var, OutageMessages_request_outage_prediction_net_eth0_rx_var, OutageMessages_request_outage_prediction_net_eth0_tx_var, OutageMessages_request_outage_prediction_net_eth1_rx_var, OutageMessages_request_outage_prediction_net_eth1_tx_var, OutageMessages_request_outage_prediction_sch_threads_var);
_msg.setPort(outage_service_port);
receive(_msg);
}

//Attributes
private double OutagePredictor_disk_write_var;
private double OutagePredictor_net_eth0_tx_var;
private double OutagePredictor_disk_read_var;
private double OutagePredictor_net_eth1_rx_var;
private double OutagePredictor_mem_used_var;
private String OutagePredictor_prediction_var;
private double OutagePredictor_swap_used_var;
private double OutagePredictor_net_eth1_tx_var;
private double OutagePredictor_sch_threads_var;
private double OutagePredictor_cpu_wait_var;
private double OutagePredictor_net_eth0_rx_var;
private double OutagePredictor_cpu_system_var;
private double OutagePredictor_cpu_user_var;
//Ports
private Port outage_service_port;
//Message types
protected final Request_server_dataMessageType request_server_dataType = new Request_server_dataMessageType();
protected final Response_server_dataMessageType response_server_dataType = new Response_server_dataMessageType();
protected final Request_outage_predictionMessageType request_outage_predictionType = new Request_outage_predictionMessageType();
//Empty Constructor
public OutagePredictor() {
super();
}

//Getters and Setters for non readonly/final attributes
public double getOutagePredictor_disk_write_var() {
return OutagePredictor_disk_write_var;
}

public void setOutagePredictor_disk_write_var(double OutagePredictor_disk_write_var) {
this.OutagePredictor_disk_write_var = OutagePredictor_disk_write_var;
}

public OutagePredictor initOutagePredictor_disk_write_var(double OutagePredictor_disk_write_var) {
this.OutagePredictor_disk_write_var = OutagePredictor_disk_write_var;
return this;
}

public double getOutagePredictor_net_eth0_tx_var() {
return OutagePredictor_net_eth0_tx_var;
}

public void setOutagePredictor_net_eth0_tx_var(double OutagePredictor_net_eth0_tx_var) {
this.OutagePredictor_net_eth0_tx_var = OutagePredictor_net_eth0_tx_var;
}

public OutagePredictor initOutagePredictor_net_eth0_tx_var(double OutagePredictor_net_eth0_tx_var) {
this.OutagePredictor_net_eth0_tx_var = OutagePredictor_net_eth0_tx_var;
return this;
}

public double getOutagePredictor_disk_read_var() {
return OutagePredictor_disk_read_var;
}

public void setOutagePredictor_disk_read_var(double OutagePredictor_disk_read_var) {
this.OutagePredictor_disk_read_var = OutagePredictor_disk_read_var;
}

public OutagePredictor initOutagePredictor_disk_read_var(double OutagePredictor_disk_read_var) {
this.OutagePredictor_disk_read_var = OutagePredictor_disk_read_var;
return this;
}

public double getOutagePredictor_net_eth1_rx_var() {
return OutagePredictor_net_eth1_rx_var;
}

public void setOutagePredictor_net_eth1_rx_var(double OutagePredictor_net_eth1_rx_var) {
this.OutagePredictor_net_eth1_rx_var = OutagePredictor_net_eth1_rx_var;
}

public OutagePredictor initOutagePredictor_net_eth1_rx_var(double OutagePredictor_net_eth1_rx_var) {
this.OutagePredictor_net_eth1_rx_var = OutagePredictor_net_eth1_rx_var;
return this;
}

public double getOutagePredictor_mem_used_var() {
return OutagePredictor_mem_used_var;
}

public void setOutagePredictor_mem_used_var(double OutagePredictor_mem_used_var) {
this.OutagePredictor_mem_used_var = OutagePredictor_mem_used_var;
}

public OutagePredictor initOutagePredictor_mem_used_var(double OutagePredictor_mem_used_var) {
this.OutagePredictor_mem_used_var = OutagePredictor_mem_used_var;
return this;
}

public String getOutagePredictor_prediction_var() {
return OutagePredictor_prediction_var;
}

public void setOutagePredictor_prediction_var(String OutagePredictor_prediction_var) {
this.OutagePredictor_prediction_var = OutagePredictor_prediction_var;
}

public OutagePredictor initOutagePredictor_prediction_var(String OutagePredictor_prediction_var) {
this.OutagePredictor_prediction_var = OutagePredictor_prediction_var;
return this;
}

public double getOutagePredictor_swap_used_var() {
return OutagePredictor_swap_used_var;
}

public void setOutagePredictor_swap_used_var(double OutagePredictor_swap_used_var) {
this.OutagePredictor_swap_used_var = OutagePredictor_swap_used_var;
}

public OutagePredictor initOutagePredictor_swap_used_var(double OutagePredictor_swap_used_var) {
this.OutagePredictor_swap_used_var = OutagePredictor_swap_used_var;
return this;
}

public double getOutagePredictor_net_eth1_tx_var() {
return OutagePredictor_net_eth1_tx_var;
}

public void setOutagePredictor_net_eth1_tx_var(double OutagePredictor_net_eth1_tx_var) {
this.OutagePredictor_net_eth1_tx_var = OutagePredictor_net_eth1_tx_var;
}

public OutagePredictor initOutagePredictor_net_eth1_tx_var(double OutagePredictor_net_eth1_tx_var) {
this.OutagePredictor_net_eth1_tx_var = OutagePredictor_net_eth1_tx_var;
return this;
}

public double getOutagePredictor_sch_threads_var() {
return OutagePredictor_sch_threads_var;
}

public void setOutagePredictor_sch_threads_var(double OutagePredictor_sch_threads_var) {
this.OutagePredictor_sch_threads_var = OutagePredictor_sch_threads_var;
}

public OutagePredictor initOutagePredictor_sch_threads_var(double OutagePredictor_sch_threads_var) {
this.OutagePredictor_sch_threads_var = OutagePredictor_sch_threads_var;
return this;
}

public double getOutagePredictor_cpu_wait_var() {
return OutagePredictor_cpu_wait_var;
}

public void setOutagePredictor_cpu_wait_var(double OutagePredictor_cpu_wait_var) {
this.OutagePredictor_cpu_wait_var = OutagePredictor_cpu_wait_var;
}

public OutagePredictor initOutagePredictor_cpu_wait_var(double OutagePredictor_cpu_wait_var) {
this.OutagePredictor_cpu_wait_var = OutagePredictor_cpu_wait_var;
return this;
}

public double getOutagePredictor_net_eth0_rx_var() {
return OutagePredictor_net_eth0_rx_var;
}

public void setOutagePredictor_net_eth0_rx_var(double OutagePredictor_net_eth0_rx_var) {
this.OutagePredictor_net_eth0_rx_var = OutagePredictor_net_eth0_rx_var;
}

public OutagePredictor initOutagePredictor_net_eth0_rx_var(double OutagePredictor_net_eth0_rx_var) {
this.OutagePredictor_net_eth0_rx_var = OutagePredictor_net_eth0_rx_var;
return this;
}

public double getOutagePredictor_cpu_system_var() {
return OutagePredictor_cpu_system_var;
}

public void setOutagePredictor_cpu_system_var(double OutagePredictor_cpu_system_var) {
this.OutagePredictor_cpu_system_var = OutagePredictor_cpu_system_var;
}

public OutagePredictor initOutagePredictor_cpu_system_var(double OutagePredictor_cpu_system_var) {
this.OutagePredictor_cpu_system_var = OutagePredictor_cpu_system_var;
return this;
}

public double getOutagePredictor_cpu_user_var() {
return OutagePredictor_cpu_user_var;
}

public void setOutagePredictor_cpu_user_var(double OutagePredictor_cpu_user_var) {
this.OutagePredictor_cpu_user_var = OutagePredictor_cpu_user_var;
}

public OutagePredictor initOutagePredictor_cpu_user_var(double OutagePredictor_cpu_user_var) {
this.OutagePredictor_cpu_user_var = OutagePredictor_cpu_user_var;
return this;
}

//Getters for Ports
public Port getOutage_service_port() {
return outage_service_port;
}
private CompositeState buildOutagePredictor_OutageBehaviour(){
final AtomicState state_OutagePredictor_OutageBehaviour_Preprocess = new AtomicState("Preprocess");
state_OutagePredictor_OutageBehaviour_Preprocess.onEntry(()->{
File picklesDir = new File("/home/uwubuntu/docker-full-stack/ml-quadrat-backend/src/main/resources/static/storage/test/generated-Cargo/python_java/src/python-scripts/pickles/");
if (!picklesDir.exists()) picklesDir.mkdirs();
File plotsDir = new File("/home/uwubuntu/docker-full-stack/ml-quadrat-backend/src/main/resources/static/storage/test/generated-Cargo/python_java/src/python-scripts/plots/");
if (!plotsDir.exists()) plotsDir.mkdirs();
List<String> chmodCmd = new ArrayList<>();
chmodCmd.add("chmod");
chmodCmd.add("u+x");
chmodCmd.add("/home/uwubuntu/docker-full-stack/ml-quadrat-backend/src/main/resources/static/storage/test/generated-Cargo/python_java/src/python-scripts/preprocess.py");
try {
    new ProcessBuilder(chmodCmd).start();
} catch(Exception e) { System.out.println(e); }
List<String> list = new ArrayList<>();
list.add("python");
list.add("/home/uwubuntu/docker-full-stack/ml-quadrat-backend/src/main/resources/static/storage/test/generated-Cargo/python_java/src/python-scripts/preprocess.py");
list.add("app_server0.csv");
list.add("FALSE");
list.add("OFF");
list.add("cpu_user,cpu_system,cpu_wait,disk_read,disk_write,mem_used,swap_used,net_eth0_rx,net_eth0_tx,net_eth1_rx,net_eth1_tx,sch_threads");
list.add("Double,Double,Double,Double,Double,Double,Double,Double,Double,Double,Double,Double");
list.add("ON");
try {
    ProcessBuilder pb = new ProcessBuilder(list);
    pb.redirectErrorStream(true);
    pb.environment().put("PYTHONIOENCODING", "utf-8");
    Process p = pb.start();
    java.io.BufferedReader reader = new java.io.BufferedReader(new java.io.InputStreamReader(p.getInputStream()));
    String line;
    while ((line = reader.readLine()) != null) {
        System.out.println("[preprocess.py] " + line);
    }
    int exitCode = p.waitFor();
    System.out.println("preprocess.py exited with code: " + exitCode);
} catch(Exception e) {
    System.out.println("Error running preprocess.py: " + e.getMessage());
    e.printStackTrace();
}
});
final AtomicState state_OutagePredictor_OutageBehaviour_Train = new AtomicState("Train");
state_OutagePredictor_OutageBehaviour_Train.onEntry(()->{
System.out.println("🔍 Checking preprocessing pickles…");
File X_train = new File("/home/uwubuntu/docker-full-stack/ml-quadrat-backend/src/main/resources/static/storage/test/generated-Cargo/python_java/src/python-scripts/pickles/preprocess_X_train.pickle");
File X_test  = new File("/home/uwubuntu/docker-full-stack/ml-quadrat-backend/src/main/resources/static/storage/test/generated-Cargo/python_java/src/python-scripts/pickles/preprocess_X_test.pickle");
if (!X_train.exists() || !X_test.exists()) {
  System.out.println("⚠️ Missing preprocess_X_{train,test}.pickle");
  return;
}
File y_train = new File("/home/uwubuntu/docker-full-stack/ml-quadrat-backend/src/main/resources/static/storage/test/generated-Cargo/python_java/src/python-scripts/pickles/preprocess_y_train.pickle");
File y_test  = new File("/home/uwubuntu/docker-full-stack/ml-quadrat-backend/src/main/resources/static/storage/test/generated-Cargo/python_java/src/python-scripts/pickles/preprocess_y_test.pickle");
if (!y_train.exists() || !y_test.exists()) {
  System.out.println("⚠️ Missing preprocess_y_{train,test}.pickle");
  return;
}
System.out.println("ℹ️ Non‑TS model detected; skipping TS pickle check.");
System.out.println("🚀 Starting train.py via Java ProcessBuilder...");
List<String> list0 = new ArrayList<String>();
list0.add("chmod");
list0.add("u+x");
list0.add("/home/uwubuntu/docker-full-stack/ml-quadrat-backend/src/main/resources/static/storage/test/generated-Cargo/python_java/src/python-scripts/train.py");
try{
    ProcessBuilder pb0 = new ProcessBuilder(list0);
    Process p0 = pb0.start();
    int code0 = p0.waitFor();
    System.out.println("✅ chmod exited with code " + code0);
} catch(Exception e){ System.out.println("❌ chmod failed: " + e); }
System.out.println("📤 Launching the process...");
List<String> list = new ArrayList<String>();
list.add("python");
list.add("/home/uwubuntu/docker-full-stack/ml-quadrat-backend/src/main/resources/static/storage/test/generated-Cargo/python_java/src/python-scripts/train.py");
try{
    ProcessBuilder pb = new ProcessBuilder(list)
        .redirectErrorStream(true);
    Process p = pb.start();
    BufferedReader reader = new BufferedReader(new InputStreamReader(p.getInputStream()));
    String line;
    while ((line = reader.readLine()) != null) {
        System.out.println("📄 [train.py] " + line);
    }
    int exitCode = p.waitFor();
    System.out.println("✅ train.py exited with code " + exitCode);
} catch(Exception e){ System.out.println("❌ Python execution failed: " + e); }
});
final AtomicState state_OutagePredictor_OutageBehaviour_Ready = new AtomicState("Ready");
final AtomicState state_OutagePredictor_OutageBehaviour_Predict = new AtomicState("Predict");
state_OutagePredictor_OutageBehaviour_Predict.onEntry(()->{
String prediction_timestamp = "";
File preprocess_original_df_pickle = new File("/home/uwubuntu/docker-full-stack/ml-quadrat-backend/src/main/resources/static/storage/test/generated-Cargo/python_java/src/python-scripts/pickles/preprocess_original_df.pickle");
if(!preprocess_original_df_pickle.exists())
    return;
File train_model_nn_mlp_c_pickle = new File("/home/uwubuntu/docker-full-stack/ml-quadrat-backend/src/main/resources/static/storage/test/generated-Cargo/python_java/src/python-scripts/pickles/train_model_nn_mlp_c.pickle");
if(!train_model_nn_mlp_c_pickle.exists())
    return;
List<String> list0 = new ArrayList<String>();
System.out.println("🔧 Creating chmod command list...");
list0.add("chmod");
list0.add("u+x");
list0.add("/home/uwubuntu/docker-full-stack/ml-quadrat-backend/src/main/resources/static/storage/test/generated-Cargo/python_java/src/python-scripts/predict.py");
try {
    System.out.println("🔧 Executing chmod to make script executable...");
    ProcessBuilder pb0 = new ProcessBuilder(list0);
    Process p0 = pb0.start();
    p0.waitFor();
    System.out.println("✅ Python script made executable.");
} catch(Exception e) {
    System.out.println("❌ Error setting script as executable: " + e);
}
List<String> list = new ArrayList<String>();
System.out.println("🔧 Creating command list for Python script...");
list.add("python");
list.add("/home/uwubuntu/docker-full-stack/ml-quadrat-backend/src/main/resources/static/storage/test/generated-Cargo/python_java/src/python-scripts/predict.py");
list.add("OFF");
System.out.println("📥 Adding features and types to list...");
list.add("cpu_user,cpu_system,cpu_wait,disk_read,disk_write,mem_used,swap_used,net_eth0_rx,net_eth0_tx,net_eth1_rx,net_eth1_tx,sch_threads");
list.add("Double,Double,Double,Double,Double,Double,Double,Double,Double,Double,Double,Double");
System.out.println("📥 Adding feature values to list...");
list.add("" + String.valueOf(OutagePredictor_cpu_user_var) + "," + String.valueOf(OutagePredictor_cpu_system_var) + "," + String.valueOf(OutagePredictor_cpu_wait_var) + "," + String.valueOf(OutagePredictor_disk_read_var) + "," + String.valueOf(OutagePredictor_disk_write_var) + "," + String.valueOf(OutagePredictor_mem_used_var) + "," + String.valueOf(OutagePredictor_swap_used_var) + "," + String.valueOf(OutagePredictor_net_eth0_rx_var) + "," + String.valueOf(OutagePredictor_net_eth0_tx_var) + "," + String.valueOf(OutagePredictor_net_eth1_rx_var) + "," + String.valueOf(OutagePredictor_net_eth1_tx_var) + "," + String.valueOf(OutagePredictor_sch_threads_var) + "");
System.out.println("🕒 Adding timestamp to list...");
list.add("'" + prediction_timestamp + "'");
StringBuilder output_string_builder = new StringBuilder();
try {
    System.out.println("🚀 Running the Python prediction script...");
    ProcessBuilder pb = new ProcessBuilder(list);
    Process p = pb.start();
    BufferedReader stdInput = new BufferedReader(new InputStreamReader(p.getInputStream()));
    String s = null;
    while ((s = stdInput.readLine()) != null) {
        System.out.println("📤 Python Output: " + s);
        output_string_builder.append(s + "\n");
    }
    p.waitFor();
    System.out.println("✅ Python script finished execution.");
} catch(Exception e) {
    System.out.println("❌ Error running predict.py: " + e);
}
File outputsDir = new File("/home/uwubuntu/docker-full-stack/ml-quadrat-backend/src/main/resources/static/storage/test/generated-Cargo/python_java/src/python-scripts/outputs/");
if (!outputsDir.exists()) outputsDir.mkdirs();
try (java.io.FileWriter fileWriter = new java.io.FileWriter("/home/uwubuntu/docker-full-stack/ml-quadrat-backend/src/main/resources/static/storage/test/generated-Cargo/python_java/src/python-scripts/outputs/prediction.txt", true)) {
    System.out.println("💾 Saving prediction to file...");
    fileWriter.write("[" + java.time.LocalDateTime.now().format(java.time.format.DateTimeFormatter.ofPattern("dd-MM-yyyy HH:mm:ss")) + "]\n");
    fileWriter.write(output_string_builder.toString() + "\n");
    System.out.println("✅ Prediction saved to /home/uwubuntu/docker-full-stack/ml-quadrat-backend/src/main/resources/static/storage/test/generated-Cargo/python_java/src/python-scripts/outputs/prediction.txt");
} catch (Exception e) {
    System.out.println("❌ Error writing prediction to file: " + e);
}
System.out.print(""+("Outage: " + getOutagePredictor_prediction_var() + "\n"));
});
state_OutagePredictor_OutageBehaviour_Predict.onExit(()->{
// -------- Start saving data --------
System.out.println("📁 Saving data to dataset...");

File dataDir = new File("data");
if (!dataDir.exists()) {
    System.out.println("📂 Creating directory: data");
    dataDir.mkdirs();
}

File datasetFile = new File("app_server0.csv");
try (BufferedWriter br = new BufferedWriter(new FileWriter(datasetFile, true))) {
    br.write(String.valueOf(OutagePredictor_cpu_user_var) + ",");
    System.out.println("✅ Feature [OutagePredictor_cpu_user_var] = " + OutagePredictor_cpu_user_var);

    br.write(String.valueOf(OutagePredictor_cpu_system_var) + ",");
    System.out.println("✅ Feature [OutagePredictor_cpu_system_var] = " + OutagePredictor_cpu_system_var);

    br.write(String.valueOf(OutagePredictor_cpu_wait_var) + ",");
    System.out.println("✅ Feature [OutagePredictor_cpu_wait_var] = " + OutagePredictor_cpu_wait_var);

    br.write(String.valueOf(OutagePredictor_disk_read_var) + ",");
    System.out.println("✅ Feature [OutagePredictor_disk_read_var] = " + OutagePredictor_disk_read_var);

    br.write(String.valueOf(OutagePredictor_disk_write_var) + ",");
    System.out.println("✅ Feature [OutagePredictor_disk_write_var] = " + OutagePredictor_disk_write_var);

    br.write(String.valueOf(OutagePredictor_mem_used_var) + ",");
    System.out.println("✅ Feature [OutagePredictor_mem_used_var] = " + OutagePredictor_mem_used_var);

    br.write(String.valueOf(OutagePredictor_swap_used_var) + ",");
    System.out.println("✅ Feature [OutagePredictor_swap_used_var] = " + OutagePredictor_swap_used_var);

    br.write(String.valueOf(OutagePredictor_net_eth0_rx_var) + ",");
    System.out.println("✅ Feature [OutagePredictor_net_eth0_rx_var] = " + OutagePredictor_net_eth0_rx_var);

    br.write(String.valueOf(OutagePredictor_net_eth0_tx_var) + ",");
    System.out.println("✅ Feature [OutagePredictor_net_eth0_tx_var] = " + OutagePredictor_net_eth0_tx_var);

    br.write(String.valueOf(OutagePredictor_net_eth1_rx_var) + ",");
    System.out.println("✅ Feature [OutagePredictor_net_eth1_rx_var] = " + OutagePredictor_net_eth1_rx_var);

    br.write(String.valueOf(OutagePredictor_net_eth1_tx_var) + ",");
    System.out.println("✅ Feature [OutagePredictor_net_eth1_tx_var] = " + OutagePredictor_net_eth1_tx_var);

    br.write(String.valueOf(OutagePredictor_sch_threads_var) + ",");
    System.out.println("✅ Feature [OutagePredictor_sch_threads_var] = " + OutagePredictor_sch_threads_var);

    java.io.File predFile = new java.io.File("/home/uwubuntu/docker-full-stack/ml-quadrat-backend/src/main/resources/static/storage/test/generated-Cargo/python_java/src/python-scripts/outputs/prediction.txt");
    if (predFile.exists()) {
        java.util.List<String> all = java.nio.file.Files.readAllLines(predFile.toPath());
        String last = all.stream()
            .filter(s -> s.contains("🔹 Prediction:"))
            .reduce((first, second) -> second)
            .orElse("");
        if (!last.isEmpty()) {
            String[] preds = last.substring(last.indexOf("[")+1, last.indexOf("]"))
                .split("\\s*,\\s*");
            for (int i = 0; i < preds.length; i++) {
                br.write(preds[i]);
                if (i < preds.length - 1) br.write(",");
            }
            System.out.println("📊 Predictions appended: " + java.util.Arrays.toString(preds));
        }
    } else {
        System.out.println("⚠️  Prediction file not found (" + predFile + ") – skipping preds.");
    }
    br.newLine();
    br.flush();
} catch (java.io.IOException e) {
    System.err.println("❌ I/O error during save: " + e.getMessage());
    e.printStackTrace();
}

});

Transition h671981276 = new Transition();
h671981276.from(state_OutagePredictor_OutageBehaviour_Preprocess).to(state_OutagePredictor_OutageBehaviour_Ready);
Transition h367066629 = new Transition();
h367066629.from(state_OutagePredictor_OutageBehaviour_Train).to(state_OutagePredictor_OutageBehaviour_Preprocess);
Transition h1810970264 = new Transition();
h1810970264.from(state_OutagePredictor_OutageBehaviour_Ready).to(state_OutagePredictor_OutageBehaviour_Predict);
h1810970264.event(request_outage_predictionType);
h1810970264.port(outage_service_port);
h1810970264.action((Event e)->{
final Request_outage_predictionMessageType.Request_outage_predictionMessage request_outage_prediction = (Request_outage_predictionMessageType.Request_outage_predictionMessage) e;
OutagePredictor_cpu_user_var = (double) (request_outage_prediction.cpu_user);
OutagePredictor_cpu_system_var = (double) (request_outage_prediction.cpu_system);
OutagePredictor_cpu_wait_var = (double) (request_outage_prediction.cpu_wait);
OutagePredictor_disk_read_var = (double) (request_outage_prediction.disk_read);
OutagePredictor_disk_write_var = (double) (request_outage_prediction.disk_write);
OutagePredictor_mem_used_var = (double) (request_outage_prediction.mem_used);
OutagePredictor_swap_used_var = (double) (request_outage_prediction.swap_used);
OutagePredictor_net_eth0_rx_var = (double) (request_outage_prediction.net_eth0_rx);
OutagePredictor_net_eth0_tx_var = (double) (request_outage_prediction.net_eth0_tx);
OutagePredictor_net_eth1_rx_var = (double) (request_outage_prediction.net_eth1_rx);
OutagePredictor_net_eth1_tx_var = (double) (request_outage_prediction.net_eth1_tx);
OutagePredictor_sch_threads_var = (double) (request_outage_prediction.sch_threads);
});

Transition h187649742 = new Transition();
h187649742.from(state_OutagePredictor_OutageBehaviour_Predict).to(state_OutagePredictor_OutageBehaviour_Ready);
final CompositeState state_OutagePredictor_OutageBehaviour = new CompositeState("OutageBehaviour");
state_OutagePredictor_OutageBehaviour.onEntry(()->{
});
state_OutagePredictor_OutageBehaviour.add(state_OutagePredictor_OutageBehaviour_Preprocess);
state_OutagePredictor_OutageBehaviour.add(state_OutagePredictor_OutageBehaviour_Train);
state_OutagePredictor_OutageBehaviour.add(state_OutagePredictor_OutageBehaviour_Ready);
state_OutagePredictor_OutageBehaviour.add(state_OutagePredictor_OutageBehaviour_Predict);
state_OutagePredictor_OutageBehaviour.initial(state_OutagePredictor_OutageBehaviour_Preprocess);
return state_OutagePredictor_OutageBehaviour;
}

public Component buildBehavior(String session, Component root) {
if (root == null) {
//Init ports
outage_service_port = new Port("outage_service", this);
} else {
outage_service_port = ((OutagePredictor)root).outage_service_port;
}
if (session == null){
//Init state machine
behavior = buildOutagePredictor_OutageBehaviour();
}
return this;
}

}
